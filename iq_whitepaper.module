<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\file\FileInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_file_download().
 */
function iq_whitepaper_file_download($uri) {
  /** @var \Drupal\file\Entity\File $file */
  $file = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $uri]);
  $file = reset($file);
  if ($file != NULL) {
    $whitepaper = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
      'type' => 'iq_group_whitepaper',
      'field_iq_group_whitepaper_file' => $file->id(),
    ]);
    $whitepaper = reset($whitepaper);
    if (!empty($whitepaper) && $whitepaper->id() > 0)
    {
      $user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
      $existing_downloads = $user->get('field_iq_group_downloads')
        ->getValue();
      $downloads = [];
      if (!empty($existing_downloads)) {
        foreach ($existing_downloads as $key => $val) {
          if ($val['target_id'] != $whitepaper->id())
            $downloads[] = $val['target_id'];
        }
      }

      // Add the branches from the whitepaper to the user's.
      $default_branches = [];

      // User branches.
      $selected_branches = $user->get('field_iq_group_branches')->getValue();
      foreach ($selected_branches as $key => $value) {
          $default_branches = array_merge($default_branches, [$value['target_id']]);
      }
      // Whitepaper branches.
      $whitepaper_branches = $whitepaper->get('field_iq_group_branches')->getValue();
      foreach ($whitepaper_branches as $key => $value) {
        $default_branches = array_merge($default_branches, [$value['target_id']]);
      }

      $user->set('field_iq_group_branches', $default_branches);

      // User products.
      $default_products = [];
      $selected_products = $user->get('field_iq_group_products')->getValue();
      foreach ($selected_products as $key => $value) {
        $default_products = array_merge($default_products, [$value['target_id']]);
      }

      // Whitepaper products.
      $whitepaper_products = $whitepaper->get('field_iq_group_products')->getValue();
      foreach ($whitepaper_products as $key => $value) {
        $default_products = array_merge($default_products, [$value['target_id']]);
      }
      $user->set('field_iq_group_products', $default_products);

      $downloads[] = $whitepaper->id();
      $user->set('field_iq_group_downloads', $downloads);
      $user->save();
      $eventDispatcher = \Drupal::service('event_dispatcher');
      $eventDispatcher->dispatch(\Drupal\iq_whitepaper\IqWhitepaperEvents::USER_DOWNLOAD_WHITEPAPER, new \Drupal\iq_whitepaper\Event\IqWhitepaperEvent($user));
    }
  }
}

/**
 * Feature to create the group content on a node create/edit.
 */
/**
 * Get content types and field to act.
 */
function _node_field_group_settings() {
  $ctypes = [
    'iq_group_whitepaper',
  ];
  $add = $edit = array();
  foreach ($ctypes as $ctype) {
    $add[] = 'node_' . $ctype . '_form';
    $edit[] = 'node_' . $ctype . '_edit_form';
  }
  return [
    'form_id_add' => $add,
    'form_id_edit' => $edit,
    'group_field' => 'field_iq_group_node_group',
  ];
}

/**
 * Implements hook_form_alter().
 */
function iq_whitepaper_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $settings = _node_field_group_settings();
  // Add node.
  if (in_array($form_id, $settings['form_id_add'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = '_node_field_group_add_custom_callback_group';
      }
    }
  }

  // you need for the edit form a different callback because maybe you have to delete or create GroupContent
  if (in_array($form_id, $settings['form_id_edit'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = '_node_field_group_edit_custom_callback_group';
      }
    }
  }
}


function _node_field_group_add_custom_callback_group($form, FormStateInterface $form_state) {
  $settings = _node_field_group_settings();
  $nid = $form_state->getValue('nid');
  $node = Node::load($nid);
  $gids = $form_state->getValue($settings['group_field']);

  foreach ($gids as $gid) {
    // Skip -none- option
    if ($gid['target_id'] == '_none') {
      continue;
    }
    $group = Group::load($gid['target_id']);
    if ($group != NULL) {
      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
      $plugin = $group->getGroupType()->getContentPlugin('group_node:'.$node->bundle());
      $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $node->id(),
      ]);
      $group_content->save();
    }
  }

}

// This function is a bit more complex because you have to do some mathematical set operations
function _node_field_group_edit_custom_callback_group($form, FormStateInterface $form_state) {
  $settings = _node_field_group_settings();
  $nid = $form_state->getValue('nid');
  $node = Node::load($nid);

  // Index-Array for wanted groups ( gid => gid )
  $gids = $form_state->getValue($settings['group_field']);
  $gids_wanted = [];
  foreach ($gids as $gid) {
    $gids_wanted[$gid['target_id']] = $gid['target_id'];
  }

  // Index-Array for existing groups for this node gid => gid
  $gids_existing = [];

  // Index-Array for gnodes for easier deletion gid => GroupContent
  $gnodes_existing = [];

  /** @var \Drupal\group\Entity\Storage\GroupContentStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage('group_content');
  // Loads all groups with a relation to the node
  $activGroupListEntity = $storage->loadByEntity($node);
  foreach ($activGroupListEntity as $groupContent) {
    // fill Index-Array with existing groups gid => gid
    $gids_existing[$groupContent->getGroup()->id()] = $groupContent->getGroup()->id();

    // fill Index-Array for existing gnodes
    $gnodes_existing[$groupContent->getGroup()->id()] = $groupContent;
  }

  // Union for existing and wanted groups
  $gids_union = $gids_existing + $gids_wanted;

  // Index-Array gnodes to create
  // = (Union for existing and wanted) minus existing
  $gids_create = array_diff($gids_union, $gids_existing);

  // Index-Array gnodes to delete
  // = (Union for existing and wanted) minus wanted
  $gids_delete = array_diff($gids_union, $gids_wanted);

  foreach ($gids_create as $gid) {
    // Skip -none- option
    if ($gid == '_none') {
      continue;
    }
    $group = Group::load($gid);
    if ($group != NULL) {
      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
      $plugin = $group->getGroupType()->getContentPlugin('group_node:'.$node->bundle());
      $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $node->id(),
      ]);
      $group_content->save();
    }
  }

  foreach ($gids_delete as $gid) {
    // Skip -none- option
    if ($gid == '_none') {
      continue;
    }
    $gnodes_existing[$gid]->delete();
  }

}

/**
 * Implements hook_views_pre_render().
 */
function iq_whitepaper_views_pre_render(\Drupal\views\ViewExecutable $view) {
  if ($view->id() == 'whitepaper_block') {
    $whitepaperForm = \Drupal::formBuilder()->getForm('Drupal\iq_whitepaper\Form\WhitepaperForm');
    // If there is a resource selected (currently whitepaper, later it may vary).
    if (\Drupal::currentUser()->isAnonymous()) {
      if ($view->filter['nid']->value['value'] != NULL) {
        unset($whitepaperForm['preferences']);
        $nid = $view->filter['nid']->value['value'];
        if (is_array($nid)) {
          $nid = reset($nid);
        }
        $whitepaperForm['destination']['#value'] = '/node/' . $nid;
        $destination = '/node/' . $nid;
        \Drupal::logger('iq_group')->notice(json_encode($view->filter['nid']->value['value']));
      }

      if (!isset($destination)) {
        $destination = \Drupal::service('path.current')->getPath();
      }
      $whitepaperForm['register_link'] = [
        '#type' => 'markup',
        '#markup' => '<a href="/user/register?destination=' . $destination . '">' . t('Create an account') . '</a> / ',
        '#weight' => 100
      ];
      $whitepaperForm['login_link'] = [
        '#type' => 'markup',
        '#markup' => '<a href="/user/login?destination=' . $destination . '">' . t('Login') . '</a>',
        '#weight' => 100
      ];
      $view->attachment_after = $whitepaperForm;
      // If the user is anonymous, he should not be able to look at the whitepapers.
      unset($view->result);
    }
    else {
      $node = $view->result[0]->_entity;

      if (!empty($node)) {
        $plugin_id = 'group_node:' . $node->bundle();

        // Load all of the group content for this node.
        $group_contents = \Drupal::entityTypeManager()
          ->getStorage('group_content')
          ->loadByEntity($node);


        /** @var \Drupal\group\Entity\GroupInterface[] $groups */
        $groups = [];
        foreach ($group_contents as $group_content) {
          /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
          $group = $group_content->getGroup();
          $groups[$group->id()] = $group;
        }
        $account = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
        $accessible = FALSE;
        foreach ($groups as $group) {
          if ($node->isPublished()) {
            if ($group->hasPermission("view $plugin_id entity", $account)) {
              $accessible = TRUE;
            }
          }
          elseif ($group->hasPermission("view unpublished $plugin_id entity", $account)) {
            $accessible = TRUE;
          }
        }
        if (!$accessible) {
          unset($view->result[0]->_entity);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function iq_whitepaper_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
  if ($entity->getType() == 'iq_group_whitepaper' && $view_mode == 'full') {
    $build['#cache']['max-age'] = 0;
    $tempStore = \Drupal::service('tempstore.shared')->get('iq_whitepaper.file_download');
    $file = $entity->field_iq_group_whitepaper_file->entity;
    $middleware = \Drupal::service('http_middleware.iq_whitepaper');
    if (!empty($file)) {

      $drupal_file_uri = $file->getFileUri();
      $file_path = file_url_transform_relative(file_create_url($drupal_file_uri));
    }
    $tempStore->set(\Drupal::currentUser()->id() . '_whitepaper_file_path', $file_path);
    \Drupal\Core\Cache\Cache::invalidateTags(['node:' . $entity->id()]);

    $response = new RedirectResponse(\Drupal\Core\Url::fromRoute('<front>')
      ->toString());
    $middleware->setRedirectResponse($response);
  }
}


function iq_whitepaper_theme($existing, $type, $theme, $path) {
  $text = '';
  return [
    'whitepaper_template' => [
      'variables' => [
        'EMAIL_TITLE' => "Whitepaper",
        'EMAIL_PREVIEW_TEXT' => 'Whitepaper download',
        'EMAIL_URL' => $text,
        'EMAIL_PROJECT_NAME' => 'Project name'
      ],
    ],
  ];
}

/**
 * Implements hook_entity_view_alter().
 */
function iq_whitepaper_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {

  if ($entity->bundle() == 'iq_group_whitepaper') {
    $build['edit_profile'] = [
      '#type' => 'markup',
      '#markup' => '</br><div class="iqbm-button iqbm-text btn btn-cta"><a href="/user/edit">' . t('Edit profile') . '</a></div>',
      '#weight' => 150000,
    ];
    // The user edit form, now removed due to adjustment.
    /*
    $user_edit = \Drupal::formBuilder()->getForm('Drupal\iq_group\Form\UserEditForm');
    unset($user_edit['full_profile_edit']);
    $build['user_wrapper'] = [
      '#type' => 'fieldset',
      '#title' => t('User settings'),
      '#prefix' => '<br/><br/>',
    ];
    $build['user_wrapper']['user_block'] = $user_edit;
    $build['user_wrapper']['#weight'] = 150000;*/
  }
}


/**
 * Implements hook_file_access().
 */
function iq_whitepaper_file_access(FileInterface $file, $operation, AccountInterface $account) {
  // Block access to private file uploads for anonymous users.
  $user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
  $whitepaper = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'iq_group_whitepaper',
    'field_iq_group_whitepaper_file' => $file->id(),
  ]);
  if (\Drupal::currentUser()->isAnonymous() && !empty($whitepaper)) {
    return AccessResult::forbidden();
  }
  else {
    $group = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));
    $group_role_storage = \Drupal::entityTypeManager()->getStorage('group_role');
    $groupRoles = $group_role_storage->loadByUserAndGroup($user, $group);
    $groupRoles = array_keys($groupRoles);
    if (in_array('subscription-lead', $groupRoles) || in_array('subscription-subscriber', $groupRoles)) {
      return AccessResult::allowed();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iq_whitepaper_form_iq_group_user_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
  // show him the link to the resource
  $result = \Drupal::entityTypeManager()
    ->getStorage('group')
    ->loadMultiple();
  $options = [];
  /**
   * @var  int $key
   * @var  \Drupal\group\Entity\Group $group
   */
  foreach ($result as $key => $group) {
    if ($group->id()!=\Drupal::config('iq_group.settings')->get('general_group_id'))
      $options[$group->id()] = $group->label();
  }

  if ($user->hasField('field_iq_group_preferences') && !isset($form['preferences'])) {
    $selected_preferences = $user->get('field_iq_group_preferences')
      ->getValue();
    $default_value = [];
    foreach ($selected_preferences as $key => $value) {
      if ($value['target_id'] != \Drupal::config('iq_group.settings')->get('general_group_id'))
        $default_value = array_merge($default_value, [$value['target_id']]);
    }

    /** @var Node $node */
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!empty($node) && $node->bundle() == 'iq_group_whitepaper') {
      $form['preferences'] = [
        '#type' => 'checkboxes',
        '#options' => $options,
        '#multiple' => TRUE,
        '#default_value' => $default_value,
        '#title' => t('Preferences'),
        '#weight' => 20,
      ];
    }
  }

  if ($user->hasField('field_iq_group_branches') && !isset($form['branches'])) {
    $vid = 'branches';
    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
    $term_options = [];
    foreach ($terms as $term) {
      $term_options[$term->tid] = $term->name;
    }
    $selected_branches = $user->get('field_iq_group_branches')
      ->getValue();
    $default_branches = [];
    foreach ($selected_branches as $key => $value) {
        $default_branches = array_merge($default_branches, [$value['target_id']]);
    }
    if (!empty($node) && $node->bundle() == 'iq_group_whitepaper') {
      $form['branches'] = [
        '#type' => 'checkboxes',
        '#options' => $term_options,
        '#default_value' => $default_branches,
        '#multiple' => TRUE,
        '#title' => t('Branches'),
        '#weight' => 30,
      ];
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function iq_whitepaper_page_attachments(array &$attachments)
{
  $user = \Drupal::currentUser();
  if (!$user->isAnonymous()) {
    $tempStore = \Drupal::service('tempstore.shared')->get('iq_whitepaper.file_download');

    $is_front_page = \Drupal::service('path.matcher')->isFrontPage();
    if (!empty($tempStore->get($user->id() . '_whitepaper_file_path')) && $is_front_page) {
      \Drupal::messenger()->deleteAll();
      \Drupal::messenger()->addMessage(t('Your whitepaper will be now downloaded. You can find it in your Downloads folder.'));
      $whitepaper_file_path = $tempStore->get($user->id() . '_whitepaper_file_path');
      \Drupal::messenger()->addMessage(t('If the download did not start automatically, click <a href="@link">here</a>.', ['@link' =>  $whitepaper_file_path]));
      $attachments['#attached']['library'][] = 'iq_whitepaper/file_download';
      $attachments['#attached']['drupalSettings']['whitepaper_file_path'] = $whitepaper_file_path;
      $tempStore->delete($user->id() . '_whitepaper_file_path');
    }
  }
}
